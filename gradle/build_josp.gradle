/*******************************************************************************
 * The John Operating System Project is the collection of software and configurations
 * to generate IoT EcoSystem, like the John Operating System Platform one.
 * Copyright (C) 2021 Roberto Pompermaier
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 ******************************************************************************/


import com.robypomper.build.java.JavaPublicationUtils
import com.robypomper.build.java.JavaRunnableUtils
import com.robypomper.build.gradle.GradleBuildInfo

/**
 * Gradle configurations to manage JOD and JSL as java implementations.
 *
 * Components list:
 * <ul>
 *     <li>
 *         JOSP JOD
 *     </li>
 * </ul>
 *
 * Summary:
 * <ul>
 *     <li>
 *         Components configs: sourceSets, configurations, dependencies and BuildInfo
 *     </li>
 *     <li>
 *         Runners Tasks: task to run components as java application
 *     </li>
 *     <li>
 *         Runners Configs Tasks: task to run components as java application with different configurations
 *     </li>
 *     <li>
 *         Runners Discovery Tasks: task to run components as java application with different discovery systems
 *     </li>
 *     <li>
 *         Publication configs: component's publications
 *     </li>
 *     <li>
 *         Publication tasks: publication's tasks to local repository
 *     </li>
 * </ul>
 */


// ------------------
// Components configs
// ------------------

sourceSets {
    jospJOD {}
}

configurations {}

dependencies {
    jospJODImplementation "com.robypomper.josp:jospCommons:${project.ext.get("version.deps.jospCommons")}"
    jospJODImplementation "commons-cli:commons-cli:${project.ext.get("version.cli")}"
    jospJODImplementation "com.googlecode.clichemaven:cliche:${project.ext.get("version.cliche")}"
    jospJODImplementation "net.sourceforge.htmlcleaner:htmlcleaner:${project.ext.get("version.htmlcleaner")}"
    jospJODImplementation "com.jayway.jsonpath:json-path:${project.ext.get("version.json-path")}"
    jospJODRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${project.ext.get("version.apache.log4j")}"
    jospJODRuntimeOnly "org.apache.logging.log4j:log4j-api:${project.ext.get("version.apache.log4j")}"
    jospJODRuntimeOnly "org.apache.logging.log4j:log4j-core:${project.ext.get("version.apache.log4j")}"
}

GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jospJOD, (String)project.ext.get("version.build.jospJOD"));

// -------------
// Runners Tasks
// -------------

// Utils: Make Java Runnable
def makeJODJavaRunnable(String runnableName, String config_yml, String struct_jod, String perms_jod) {
    makeJODJavaRunnable(runnableName, false, config_yml, struct_jod, perms_jod, null, true)
}
def makeJODJavaRunnable(String runnableName, String config_yml, String struct_jod, String perms_jod, String group_name) {
    makeJODJavaRunnable(runnableName, false, config_yml, struct_jod, perms_jod, group_name, true)
}
def makeJODJavaRunnable(String runnableName, String config_yml, String struct_jod, String perms_jod, boolean overrideIfExist) {
    makeJODJavaRunnable(runnableName, false, config_yml, struct_jod, perms_jod, null, overrideIfExist)
}
def makeJODJavaDaemon(String runnableName, String config_yml, String struct_jod, String perms_jod, boolean overrideIfExist) {
    makeJODJavaRunnable(runnableName, true, config_yml, struct_jod, perms_jod, null, overrideIfExist)
}
def makeJODJavaRunnable(String runnableName, String config_yml, String struct_jod, String perms_jod, String group_name, boolean overrideIfExist) {
    makeJODJavaRunnable(runnableName, false, config_yml, struct_jod, perms_jod, null, overrideIfExist)
}
def makeJODJavaRunnable(String runnableName, boolean isDaemon, String config_yml, String struct_jod, String perms_jod, String group_name, boolean overrideIfExist) {
    runnableName = "JOD${runnableName}" + (isDaemon ? "Daemon" : "")
    String mainClass = isDaemon ? 'com.robypomper.josp.jod.JODDaemon' : 'com.robypomper.josp.jod.JODShell'
    String dir = isDaemon ? "jod-daemon" : "jod"
    File workingDir = file("envs/runnables/${dir}/${runnableName}")

    JavaRunnableUtils.makeJavaFromSourceSet(project, sourceSets.jospJOD, mainClass, runnableName, workingDir)
    String jarTaskName = "java${runnableName}Run"

    tasks.getByName(jarTaskName) {
        group = group_name==null ? 'JOSP runners jod' : "JOSP runners jod ($group_name)"
        standardInput = System.in
        //args = ['--configs', 'src/jospJOD/configs/jod_dev.yml']
        //jvmArgs = ['-Djavax.net.debug=ssl']
        jvmArgs = ['-Dlog4j.configurationFile=' + project.file('src/jospJOD/configs/log4j2/log4j2.xml').absolutePath]

        doFirst {
            if (workingDir.exists() && overrideIfExist)
                delete workingDir

            if (!workingDir.exists())
                copy {
                    from "src/jospJOD/configs/${config_yml}"
                    from "src/jospJOD/configs/${struct_jod}"
                    from "src/jospJOD/configs/${perms_jod}"
                    rename 'jod(.+).yml', 'jod.yml'
                    rename 'struct(.+).jod', 'struct.jod'
                    rename 'perms(.+).jod', 'perms.jod'
                    into "$workingDir/configs"
                }
        }
    }
}

// JOSP JOD
makeJODJavaRunnable('','jod_default.yml','struct_default.jod','perms_default.jod',false)
makeJODJavaRunnable('OnlyLocal','jod_only-local.yml','struct_default.jod','perms_default.jod',false)
makeJODJavaRunnable('OnlyCloud','jod_only-cloud.yml','struct_default.jod','perms_default.jod',false)
makeJODJavaRunnable('NoComm','jod_no-comm.yml','struct_default.jod','perms_default.jod',false)
makeJODJavaRunnable('Vanilla','jod_default.yml','struct_default.jod','perms_default.jod')
makeJODJavaRunnable('VanillaOnlyLocal','jod_only-local.yml','struct_default.jod','perms_default.jod')
makeJODJavaRunnable('VanillaOnlyCloud','jod_only-cloud.yml','struct_default.jod','perms_default.jod')
makeJODJavaRunnable('VanillaNoComm','jod_no-comm.yml','struct_default.jod','perms_default.jod')
makeJODJavaDaemon('','jod_default.yml','struct_default.jod','perms_default.jod',false)
makeJODJavaDaemon('OnlyLocal','jod_only-local.yml','struct_default.jod','perms_default.jod',false)
makeJODJavaDaemon('OnlyCloud','jod_only-cloud.yml','struct_default.jod','perms_default.jod',false)
makeJODJavaDaemon('NoComm','jod_no-comm.yml','struct_default.jod','perms_default.jod',false)
task javaJOD_Clean(type: Delete) {
    group 'JOSP cleaners'
    delete "envs/runnables/jod/JOD"
}
clean.dependsOn javaJOD_Clean


// ---------------------
// Runners Configs Tasks
// ---------------------

/*
 * ObjId    =>  unset   local   cloud
 * Owner    =>  unset   set
 *
 * Configs (ObjId, OwnerId, Off/Online)
 */
makeJODJavaRunnable('uuf','configs/jod_uuf.yml','struct_default.jod','perms_default.jod','Configs')
makeJODJavaRunnable('uun','configs/jod_uun.yml','struct_default.jod','perms_default.jod','Configs')
makeJODJavaRunnable('usf','configs/jod_usf.yml','struct_default.jod','perms_default.jod','Configs')
makeJODJavaRunnable('usn','configs/jod_usn.yml','struct_default.jod','perms_default.jod','Configs')
makeJODJavaRunnable('luf','configs/jod_luf.yml','struct_default.jod','perms_default.jod','Configs')
makeJODJavaRunnable('lun','configs/jod_lun.yml','struct_default.jod','perms_default.jod','Configs')
makeJODJavaRunnable('lsf','configs/jod_lsf.yml','struct_default.jod','perms_default.jod','Configs')
makeJODJavaRunnable('lsn','configs/jod_lsn.yml','struct_default.jod','perms_default.jod','Configs')
makeJODJavaRunnable('cuf','configs/jod_cuf.yml','struct_default.jod','perms_default.jod','Configs')
makeJODJavaRunnable('cun','configs/jod_cun.yml','struct_default.jod','perms_default.jod','Configs')
makeJODJavaRunnable('csf','configs/jod_csf.yml','struct_default.jod','perms_default.jod','Configs')
makeJODJavaRunnable('csn','configs/jod_csn.yml','struct_default.jod','perms_default.jod','Configs')


// -----------------------
// Runners Discovery Tasks
// -----------------------

/*
 * ObjId    =>  unset   local   cloud
 * Owner    =>  unset   set
 *
 * Configs (ObjId, OwnerId, Off/Online)
 */
makeJODJavaRunnable('Avahi','discovery/jod_avahi.yml','struct_default.jod','perms_default.jod','Discovery')
makeJODJavaRunnable('DNSSD','discovery/jod_dnssd.yml','struct_default.jod','perms_default.jod','Discovery')
makeJODJavaRunnable('JmDNS','discovery/jod_jmdns.yml','struct_default.jod','perms_default.jod','Discovery')
makeJODJavaRunnable('JmmDNS','discovery/jod_jmmdns.yml','struct_default.jod','perms_default.jod','Discovery')


// -------------------
// Publication configs
// -------------------

String jospJODName = 'JOSP Object Daemon'
String jospJODArtifact = 'jospJOD'
String jospJODVersion = project.ext.get("version.build.jospJOD")
String jospJODDescription = "This is the JOSP JOD executable from John O.S. Project"
def jospJODPubDesc = new JavaPublicationUtils.Descriptor(project,sourceSets.jospJOD,jospJODName,jospJODArtifact,jospJODVersion,jospJODDescription)
        .setUrlsFromProject(project)
        .setLicenceGPLv3()
        .setExecutable()
        .setArtifactOpens()
        .setArtifactDistr()
JavaPublicationUtils.generatePublication(project,jospJODPubDesc)
tasks.jospJODDocs.enabled = !project.ext.get("disableDocs");


// -----------------
// Publication tasks
// -----------------

task jospJOD_PublishToLocal {
    description = 'Publish JOSP JOD component to local repository...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJospJODPublicationToMavenLocal
}